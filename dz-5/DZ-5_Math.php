<?php
echo "<h1>Математические задачи</h1>";

/*1. Даны переменные $a = 10 и $b = 3. Найдите остаток от деления $a на $b. */
echo "<p>Задача 1</p>";

$a = 10;
$b = 3;
$c = $a % $b;
echo $c; //

/*2. Даны переменные $a и $b.
Проверьте, что $a делится без остатка на $b.
Если это так — выведите 'Делится' и результат деления, иначе выведите 'Делится с остатком' и остаток от деления. */
echo "<p>Задача 2</p>";

$a = rand(51, 200);
$b = rand(1, 50);
$c = $a % $b;

if($c == 0) {
    echo "$a % $b = $c". ' Делится без остатка';
}
else {
    echo "$a % $b и остаток от деления это - $c";
}

/*3. Даны переменные $a и $b.
Найдите модуль разности $a и $b. Проверьте работу скрипта самостоятельно для различных $a и $b.*/
echo "<p>Задача 3</p>";

$a = rand(-10, 10);
$b = rand(-10, 10);
$c = $a - $b;
echo "$a - $b = $c";
echo '<br>';

if($c >= 0) {
    echo "Разница числел $a и $b положительна и равна $c, соответственно модуль это числа равен " . abs($c);
}
elseif ($c < 0) {
    echo "Разница чисел $a и $b равна числу отрицательному $c, а модуль этого числа равен " . abs($c);
}

/* 4. Даны переменные $a и $b.
Отнимите от $a переменную $b и результат присвойте переменной $c.
Сделайте так, чтобы в любом случае в переменную $c записалось положительное значение.
Проверьте работу скрипта при $a и $b, равных соответственно 3 и 5, 6 и 1. */
echo "<p>Задача 4</p>";

$a = 3;
$b = 5;
$c = $a - $b;

if($a - $b >= 0) {
    echo "$a - $b = ". abs($c);
}
elseif ($a - $b < 0) {
    echo "$a - $b = " . abs($c);
}

/* 5. Возведите 2 в 10 степень. Результат запишите в переменную $st. */
echo "<p>Задача 5</p>";

$st = 2 ** 10;
// 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2
// pow(2,10)
echo $st;

/*6. Найдите квадратный корень из 245. */
echo "<p>Задача 6</p>";
$a = 245;

echo sqrt($a);



/* 7. Дан массив с элементами 4, 2, 5, 19, 13, 0, 10.
Найдите квадратный корень из суммы квадратов его элементов.
Для решения воспользуйтесь циклом foreach. */
echo "<p>Задача 7</p>";

$arr = [4, 2, 5, 19, 13, 0, 10];
$buff = 0;
foreach ($arr as $v) {
    $buff += $v;
}
echo 'Сумма элементов массива ' . $buff . '<br>';
echo 'Корень элемента суммы массива = ' . sqrt($buff);

/* 8. Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых. */
echo "<p>Задача 8</p>";

$a = 379;
$b = sqrt($a);
$c = round($b, 2);
$d = round($b, 1);
echo $b . '<br>';
echo $c . '<br>';
echo $d . '<br>';

/* 9. Найдите квадратный корень из 587.
Округлите результат в большую и меньшую сторону,
запишите результаты округления в ассоциативный массив с ключами 'floor' и 'ceil'. */
echo "<p>Задача 9</p>";

$a = 587;
echo $a . '<br>';
$b = sqrt($a); // корень числа
echo $b . '<br>';
$c = floor($b); // округления вверх
echo $c . '<br>';
$d = ceil($b); // окрегление в низ
echo $d . '<br>';

/* 10. Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число. */
echo "<p>Задача 10</p>";
echo "4, -2, 5, 19, -130, 0, 10" . '<br>';
$arr10 = [4, -2, 5, 19, -130, 0, 10];

$max = $arr10[0];
$min = $arr10[0];
foreach ($arr10 as $v) {
    if($max < $v) {
        $max = $v;
    }
    if($min > $v) {
        $min = $v;
    }
}
echo "самое большое число $max" . '<br>';
echo "самое маленькое число $min";

/* 11. Выведите на экран случайное число от 1 до 100. */
echo "<p>Задача 11</p>";

$a = rand(1, 100);
echo 'Случайное число от 1 до 100 - ' . $a;

/*12. Сделайте так,
чтобы каждый раз при обновлении страницы на экран выводилась случайным образом одна из трех картинок */
echo "<p>Задача 12</p>";

$a = rand(1,3);
switch ($a) {
    case 1: echo "первая картинка"; break;
    case 2: echo "вторая картинка"; break;
    case 3: echo "третья картинка"; break;
    default: echo 'Вы не ввесли число';
}

/*13. Заполните массив 10-ю случайными числами. (Подсказка: нужно воспользоваться циклами for или while). */
echo "<p>Задача 13</p>";

$qwe = [];
for($i = 0; $i < 10; $i++) {
    $qwe[] = rand(1,10);
}
print_r($qwe);

/* 14. Напишите скрипт, который будет находить корни квадратного уравнения. */
echo "<p>Задача 14</p>";
$a = 3;
$b = 5;
$c = 8;
$d = pow($b, 2) - (4 * $a * $c);
$ds = sqrt($d);
if ($ds > 0) {
    $x1 = (-$b + $ds) / 2 * $a;
    $x2 = (-$b - $ds) / 2 * $a;
    echo $x1 . "<br />";
    echo $x2 . "<br />";
} elseif ($ds == 0) {
    $x1 = -$b / 2 * $a;
    echo $x1;
} else {
    echo 'Корней нет';
}

/* 15. Напишите скрипт, который   будет находить факториал числа.
Факториал — это произведение всех целых чисел, меньше данного.
Например, 4! = 1*2*3*4 = 24. */
echo "<p>Задача 15</p>";

function factorial ($n) {
    if($n < 1) {
        return 1;
    }
    return $n * factorial($n-1);
}
$t = rand(1,8);
echo "Факториал числа $t равен " . factorial($t);

/* 16. Напишите скрипт, который проверяет,
является ли данное число простым (простое число — это то, которое делится только на 1 и на само себя). */
echo "<p>Задача 16</p>";

$number = rand(1,1000);
echo $number . '<br>';
$i = 2;
$arr = array();
while ($number != 1)
{
    if ($number % $i == 0)
    {
        $arr[] = $i;
        $number =  $number / $i;
    }
    else
    {
        $i++;
    }
}
if ($arr[0] == $i)
{
    echo 'Простое число';
}

/* 17. Дан массив $arr.
Найдите среднее арифметическое его элементов.
Подсказка: количество элементов массива можно подсчитать функцией count.
Проверьте задачу на массиве с элементами 12, 15, 20, 25, 59, 79. */
echo "<p>Задача 17</p>";

$arr17 = [12, 15, 20, 25, 59, 79];
$count = count($arr17);
echo 'Кол-во элементов массива - ' . $count . '<br>';
$sum = 0;

foreach ($arr17 as $v) {
    $sum += $v;
}
echo 'Сумма элементов массива - ' . $sum . '<br>';
$srArf = $sum / $count;
echo 'Среднее арифметическое элементов массива равно ' . $srArf;

/* 18. Напишите скрипт-калькулятор единого налога.
Налог считается так: если вы заработали менее, чем ставка $stavka этого налога,
умноженная на 30 — то платите ставку. Если же вы заработали более, чем 30*$stavka,
то платите не только ставку налога, но и 5% от той суммы, на которую вы превысили 30*$stavka. */
echo "<p>Задача 18</p>";

$zarplata = rand(1000, 4000);
$stavka = 30*100;
$nalog = $stavka*0.05;
$minimalka = $stavka - $nalog;
if($zarplata < $stavka) {
    echo "Вы заработали " . "$stavka -  5% налога = " . $minimalka;
}
else {
    $nalog2 = $zarplata - ($zarplata * 0.05);
    echo "Вы заработали $zarplata - 5% налога что составляет $nalog2";
}

/* 19. Напишите скрипт-калькулятор оплаты за электроэнергию.
Сумма считается так: если вы потратили за месяц менее 150 киловатт,
то сумма считается по одной ставке $summ1 за 1 киловатт,
всё, что больше 150 и меньше 300 киловатт считается по ставке $summ2,
а все киловатты после 300 — по ставке $summ3. */
echo "<p>Задача 19</p>";

$kwt = rand(50, 400);
echo 'В этом месяце мы нагуляли - ' . $kwt . ' кВт' . '<br   >';
$summ1 = 71.4;
$summ2 = 129;
$summ3 = 163.8;

switch ($kwt) {
    case ($kwt < 150): echo 'Это значит что придеться заплатить по ставке ' . $summ1 . ' и получиться - ' . $kwt * $summ1;
        break;
    case ($kwt >= 150 && $kwt < 300): echo 'Это значит что придеться заплатить по ставке ' . $summ2 . ' и получиться - ' . $kwt * $summ1;
        break;
    case ($kwt >= 300): echo 'Это значит что придеться заплатить по ставке ' . $summ3 . ' и получиться - ' . $kwt * $summ1;
        break;
}


/* 20. Напишите скрипт,
который найдет все простые числа в заданном промежутке.
Проверьте его работу на промежутке от 1 до 1000. */
echo "<p>Задача 20</p>";

function PrimeNumber($n) {
    $tmp1 = []; // ШАГ 1. сначала заполняем вр. массив1 ключами от 1 до $n со значением 1
    $tmp2 = []; // ШАГ 2. добавляем все ключи из tmp1 со значением '0' в tmp2 в value, это и будут все просто числа
    $tmp[1] = 0; // не просто число
    for ($i = 2; $i < $n; $i++) {
        $tmp1[$i] = 1;
    }
    for($i = 2; $i * $i <= $n; $i++) {
        // Если $i - простое (не вычеркнутое)
        if($tmp1[$i] == 1) {
            // То вычеркиваем кратные $i
            for($j = $i * $i; $j <= $n; $j += $i ) {
                $tmp1[$j] = 0;
            }
        }
    }
    foreach ($tmp1 as $k => $v) {
        if($v == 1) {
            $tmp2[] = $k;
        }
    }
    return $tmp2;
}
echo "<pre>";
    print_r(PrimeNumber(100));
echo "</pre>";

/*21. Напишите скрипт, который будет находить тройки целых чисел, удовлетворяющих теореме Пифагора. */
echo "<p>Задача 21</p>";

echo "<table>";
echo "<tr>";
echo "<th>X</th>";
echo "<th>Y</th>";
echo "<th>Z</th>";
echo "</tr>";
$n = 100;
for ($x = 1; $x < $n; $x++) {
    for ($y = 1; $y < $n; $y++) {
        for ($z = 1; $z < $n; $z++) {
            if ($x*$x + $y*$y == $z*$z) {
                echo "<tr>";
                echo "<td>$x</td>";
                echo "<td>$y</td>";
                echo "<td>$z</td>";
                echo "</tr>";

            }
        }
    }
}
echo "</table>";
?>
<style>
    p {
        color: red;
    }
    table {
        border: 1px solid silver;
    }
    td {
        width: 150px;
        text-align: center;
    }
</style>
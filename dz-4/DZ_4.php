<?php
echo "<h1>Функции пользователя</h1>";

/*1  Дан массив с произвольными числами. Сделайте так, чтобы элемент
повторился в массиве количество раз, соответствующее его числу.
Пример: array(1, 3, 2, 4) превратится в array(1, 3, 3, 3, 2, 2, 4, 4, 4,
4) . */
echo "<p>Задание 1</p>";

$arr = [1,3,2,4];
print_r($arr);
echo '<br>';
function London ($n) {
    $buff = [];
    foreach ($n as $v) {
        for($i = 0; $i < $v; $i++) {
            $buff[] = $v;
        }
    }
    return $buff;
}
print_r(London($arr));


/*2  Дан массив с произвольными целыми числами. Сделайте так, чтобы
первый элемент стал ключом второго элемента, третий элемент -
ключом четвертого и так далее. Пример: array(1, 2, 3, 4, 5, 6)
превратится в array(1=>2, 3=>4, 5=>6) . */
echo "<p>Задание 2</p>";

$arr = [1,2,3,4,5,6,7,8];
print_r($arr);
echo '<br>';

function Manchester ($n) {
    $buff = [];
    $count = count($n);
    for ($i = 0; $i < $count; $i = $i + 2) {
        $buff[$n[$i]] = $n[$i+1];
    }
    return $buff;
}
print_r(Manchester($arr));




/*3  Дана строка. Удалите из этой строки четные символы. */
echo "<p>Задание 3</p>";

$qwe3 = 'we have a nice day today!';
function Birmingham($a) {
    $count = strlen($a);
    $buff = '';
    for ($i = 0; $i < $count; $i += 2) {
        $buff .= $a{$i};
    }
    return $buff;
}
echo Birmingham($qwe3);

/*4  Дана строка. Поменяйте ее первый символ на второй и наоборот,
третий на четвертый и наоборот, пятый на шестой и наоборот и так
далее. То есть из строки '12345678' нужно сделать '21436587' . */
echo "<p>Задание 4</p>";

$qwe4 = '12345678';
echo $qwe4.'<br>';

function Oxford ($a) {
    $count = strlen($a);
    $buff = '';
    for($i = 0; $i < $count; $i +=2) {
        $buff .= $a[$i+1].$a[$i];
    }
    return $buff;
}
echo Oxford($qwe4);


/*5 Напишите функцию, которая подсчитывает количество всех значений массива.
Функция должна учитывать вложенность массивов. (функцией array_count_values пользоваться нельзя). */
echo "<p>Задание 5</p>";

$arr=[1,2,3,array(4,5),6,7,8,0];

function Liverpool($arr) {
    $count = 0;
    foreach ($arr as $v) {
        if(is_array($v)) {
            $count = $count + Liverpool($v);
        }
        else {
            $count ++;
        }
    }
    return $count;
}
echo Liverpool($arr);



/*6 Напишите функцию, которой в параметре передается
массив из случайных чисел. Функция возвращает массив из
уникальных (не повторяющихся) значений (аналог функции
array_unique). */
echo "<p>Задание 6</p>"; // с этой задачей я не омог разобраться двое суток, много решений видео много эксп-вал
                          //и в этоге сделал свое, очень странное

function Leeds($n) {
    $tmp = [];
    $tmp2 = [];
    foreach ($n as $v1) {
        foreach ($n as $v2) {

            if ($v1 == $v2) {
                $tmp[$v2] = 0; // Перебираем значения массива и записываем их как ключи первого временного массива,
                                // если попадаються одинаковые значения,
                                // ключ перезаписывает предыдущий так как одинаковых ключей не бывает

            }
        }
    }
    foreach ($tmp as $k => $v) {
        $tmp2[] = $k; // потом берем первый временный массив и его ключи присваиваем второму временному массиву как значения
    }
    return $tmp2; // и возвращаем массив с уникальными значениями lol =)
}

$arr = array (1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9, 9);
print_r($arr);
echo '<hr>';
print_r(Leeds($arr));

/* 7 Напишите функцию, которая будет противоположной array_unique, т.е.
будет оставлять дубликаты, но удалять не повторяющиеся значения. */
echo "<p>Задание 7</p>";

$arr = array (1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9, 9);
print_r($arr);
echo '<hr>';


function Cambridge($n) {
    $buff = [];
    $count = count($n)-1;
    foreach ($n as $k => $v) {
        $x = 0;
        for ($i = 0; $i <= $count; $i++) {
            if($v == $n[$i]) {
                $x++;
            }
        }
        if($x > 1) {
            $buff[] = $v;
        }
    }
return $buff;
}

print_r(Cambridge($arr));




/*8 Напишите функцию, которой передается фамилия имя и отчество, а
функция возвращает фамилию и инициалы. Например, передаем
Ivanov Ivan Ivanovich и нам выводит: Ivanov I. I. */
echo "<p >Задание 8</p>";
$lastName = 'Ivanov';
$name = 'Ivan';
$thirdName = 'Ivanovich';
function Bristol($a, $b, $c) {
    $buff = '';
    $buff .= "$a "."$b[0]. "."$c[0]. ";
    return $buff;
}
echo Bristol($lastName, $name, $thirdName);


/*9 ( +1 ) Таблица умножения. Напишите функцию, которая принимает на
вход два параметра: количество строк и количество колонок. Функция
возвращает ( не выводит на экран! ) таблицу умножения вида
http://joxi.ru/brR577kiJJNRXA . Можно использовать table или div теги
html. Цвет перемножаемых колонок и строк можете задать отдельным
третьим параметром в виде hex-кода цвета . */
echo "<p>Задание 9</p>";

function York ($a, $b) {
    $table = '<table cellpadding="5" border="2">';
    for($i = 1; $i < $a; $i++) {
        $table .= '<tr>';
        for($j = 1; $j < $b; $j++){
            if($i == 1 or $j == 1) {
                $table .= '<th style="color:lemonchiffon;background-color:darkgreen;">'. $i*$j .'</th>';
            }
            else {
                $table .= '<td>'. $i*$j . '</td>';
            }
        }
        $table .= '</tr>';
    }
    $table .= '</table>';
    return $table;
}
echo York(10,10);


/* 10. ( +1 ) Написать рекурсивную функцию , которая на вход получает число
и вычисляет и возвращает значение факториала этого числа. */
echo "<p>Задание 10</p>";

function Brighton ($n) {
    if($n == 1) {
        return 1;
    }
    return $n * Brighton($n-1);
}
echo Brighton(6);

/* 11.( +1 ) Написать функцию (рекурсивную либо обычную - по желанию),
которая принимает на вход параметр (например, $n) и вычисляет
число Фибоначчи до предела $n. Результат вычисления возвращается
этой же функцией. */
// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946
echo "<p>Задание 11</p>";

function Sheffield ($n) {
    if($n < 3) {
        return 1;
    }
    else {
        return Sheffield($n-1)+Sheffield($n-2);
    }
}
echo Sheffield(7);

/* 12.( +1 ) Напишите рекурсивную функцию , принимающую на вход
натуральное число $n. Функция возвращает строку из всех чисел от 1
до $n либо от $n до 1. За порядок сортировки должен отвечать
дополнительный параметр функции - $order, который может
принимать значение ‘desc’ (убывающий) или ‘asc’ (возрастающий) и
по-умолчанию должен быть равен ‘desc’. */
echo "<p>Задание 12</p>";

function Nottingham($n, $order = 'desc') {
    if($n < 1){
        return '';
    }
    if($order ===  'asc'){
        return Nottingham($n - 1, $order) . $n;
    } else {
        return $n . Nottingham($n - 1, $order);
    }
}

echo Nottingham(6, 'asc');


?>
<style>
    p {
        color: red;
    }
</style>